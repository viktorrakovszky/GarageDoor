{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { genkitPlugin, Plugin } from '@genkit-ai/core';\nimport {\n  SUPPORTED_MODELS as EMBEDDER_MODELS,\n  textEmbeddingGecko001,\n  textEmbeddingGeckoEmbedder,\n} from './embedder.js';\nimport {\n  gemini15Flash,\n  gemini15Flash8B,\n  gemini15Pro,\n  geminiPro,\n  geminiProVision,\n  googleAIModel,\n  SUPPORTED_V15_MODELS,\n  SUPPORTED_V1_MODELS,\n} from './gemini.js';\nexport {\n  gemini15Flash,\n  gemini15Flash8B,\n  gemini15Pro,\n  geminiPro,\n  geminiProVision,\n  textEmbeddingGecko001,\n};\n\nexport interface PluginOptions {\n  apiKey?: string;\n  apiVersion?: string | string[];\n  baseUrl?: string;\n}\n\nexport const googleAI: Plugin<[PluginOptions] | []> = genkitPlugin(\n  'googleai',\n  async (options?: PluginOptions) => {\n    let models;\n    let embedders;\n    let apiVersions = ['v1'];\n\n    if (options?.apiVersion) {\n      if (Array.isArray(options?.apiVersion)) {\n        apiVersions = options?.apiVersion;\n      } else {\n        apiVersions = [options?.apiVersion];\n      }\n    }\n    if (apiVersions.includes('v1beta')) {\n      (embedders = []),\n        (models = [\n          ...Object.keys(SUPPORTED_V15_MODELS).map((name) =>\n            googleAIModel(name, options?.apiKey, 'v1beta', options?.baseUrl)\n          ),\n        ]);\n    }\n    if (apiVersions.includes('v1')) {\n      models = [\n        ...Object.keys(SUPPORTED_V1_MODELS).map((name) =>\n          googleAIModel(name, options?.apiKey, undefined, options?.baseUrl)\n        ),\n        ...Object.keys(SUPPORTED_V15_MODELS).map((name) =>\n          googleAIModel(name, options?.apiKey, undefined, options?.baseUrl)\n        ),\n      ];\n      embedders = [\n        ...Object.keys(EMBEDDER_MODELS).map((name) =>\n          textEmbeddingGeckoEmbedder(name, { apiKey: options?.apiKey })\n        ),\n      ];\n    }\n    return {\n      models,\n      embedders,\n    };\n  }\n);\n\nexport default googleAI;\n"],"mappings":";;;AAgBA,SAAS,oBAA4B;AACrC;AAAA,EACE,oBAAoB;AAAA,EACpB;AAAA,EACA;AAAA,OACK;AACP;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAgBA,MAAM,WAAyC;AAAA,EACpD;AAAA,EACA,CAAO,YAA4B;AACjC,QAAI;AACJ,QAAI;AACJ,QAAI,cAAc,CAAC,IAAI;AAEvB,QAAI,mCAAS,YAAY;AACvB,UAAI,MAAM,QAAQ,mCAAS,UAAU,GAAG;AACtC,sBAAc,mCAAS;AAAA,MACzB,OAAO;AACL,sBAAc,CAAC,mCAAS,UAAU;AAAA,MACpC;AAAA,IACF;AACA,QAAI,YAAY,SAAS,QAAQ,GAAG;AAClC,MAAC,YAAY,CAAC,GACX,SAAS;AAAA,QACR,GAAG,OAAO,KAAK,oBAAoB,EAAE;AAAA,UAAI,CAAC,SACxC,cAAc,MAAM,mCAAS,QAAQ,UAAU,mCAAS,OAAO;AAAA,QACjE;AAAA,MACF;AAAA,IACJ;AACA,QAAI,YAAY,SAAS,IAAI,GAAG;AAC9B,eAAS;AAAA,QACP,GAAG,OAAO,KAAK,mBAAmB,EAAE;AAAA,UAAI,CAAC,SACvC,cAAc,MAAM,mCAAS,QAAQ,QAAW,mCAAS,OAAO;AAAA,QAClE;AAAA,QACA,GAAG,OAAO,KAAK,oBAAoB,EAAE;AAAA,UAAI,CAAC,SACxC,cAAc,MAAM,mCAAS,QAAQ,QAAW,mCAAS,OAAO;AAAA,QAClE;AAAA,MACF;AACA,kBAAY;AAAA,QACV,GAAG,OAAO,KAAK,eAAe,EAAE;AAAA,UAAI,CAAC,SACnC,2BAA2B,MAAM,EAAE,QAAQ,mCAAS,OAAO,CAAC;AAAA,QAC9D;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAO,cAAQ;","names":[]}