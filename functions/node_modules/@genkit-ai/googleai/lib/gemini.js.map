{"version":3,"sources":["../src/gemini.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { extractJson } from '@genkit-ai/ai/extract';\nimport {\n  CandidateData,\n  defineModel,\n  GenerationCommonConfigSchema,\n  getBasicUsageStats,\n  MediaPart,\n  MessageData,\n  ModelAction,\n  ModelMiddleware,\n  modelRef,\n  ModelReference,\n  Part,\n  ToolDefinitionSchema,\n  ToolRequestPart,\n  ToolResponsePart,\n} from '@genkit-ai/ai/model';\nimport {\n  downloadRequestMedia,\n  simulateSystemPrompt,\n} from '@genkit-ai/ai/model/middleware';\nimport { GENKIT_CLIENT_HEADER } from '@genkit-ai/core';\nimport {\n  FileDataPart,\n  FunctionCallPart,\n  FunctionDeclaration,\n  FunctionDeclarationSchemaType,\n  FunctionResponsePart,\n  GenerateContentCandidate as GeminiCandidate,\n  Content as GeminiMessage,\n  Part as GeminiPart,\n  GenerateContentResponse,\n  GenerationConfig,\n  GoogleGenerativeAI,\n  InlineDataPart,\n  RequestOptions,\n  StartChatParams,\n  Tool,\n} from '@google/generative-ai';\nimport process from 'process';\nimport z from 'zod';\n\nconst SafetySettingsSchema = z.object({\n  category: z.enum([\n    'HARM_CATEGORY_UNSPECIFIED',\n    'HARM_CATEGORY_HATE_SPEECH',\n    'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n    'HARM_CATEGORY_HARASSMENT',\n    'HARM_CATEGORY_DANGEROUS_CONTENT',\n  ]),\n  threshold: z.enum([\n    'BLOCK_LOW_AND_ABOVE',\n    'BLOCK_MEDIUM_AND_ABOVE',\n    'BLOCK_ONLY_HIGH',\n    'BLOCK_NONE',\n  ]),\n});\n\nconst GeminiConfigSchema = GenerationCommonConfigSchema.extend({\n  safetySettings: z.array(SafetySettingsSchema).optional(),\n  codeExecution: z.union([z.boolean(), z.object({}).strict()]).optional(),\n});\n\nexport const geminiPro = modelRef({\n  name: 'googleai/gemini-pro',\n  info: {\n    label: 'Google AI - Gemini Pro',\n    supports: {\n      multiturn: true,\n      media: false,\n      tools: true,\n      systemRole: true,\n    },\n    versions: ['gemini-1.0-pro', 'gemini-1.0-pro-latest', 'gemini-1.0-pro-001'],\n  },\n  configSchema: GeminiConfigSchema,\n});\n\n/**\n * @deprecated Use `gemini15Pro`, `gemini15Flash`, or `gemini15flash8B` instead.\n */\nexport const geminiProVision = modelRef({\n  name: 'googleai/gemini-pro-vision',\n  info: {\n    label: 'Google AI - Gemini Pro Vision',\n    // none declared on https://ai.google.dev/models/gemini#model-variations\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: false,\n      systemRole: false,\n    },\n    stage: 'deprecated',\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini15Pro = modelRef({\n  name: 'googleai/gemini-1.5-pro-latest',\n  info: {\n    label: 'Google AI - Gemini 1.5 Pro',\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      systemRole: true,\n      output: ['text', 'json'],\n    },\n    versions: [\n      'gemini-1.5-pro',\n      'gemini-1.5-pro-001',\n      'gemini-1.5-pro-002',\n      'gemini-1.5-pro-exp-0827',\n    ],\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini15Flash = modelRef({\n  name: 'googleai/gemini-1.5-flash-latest',\n  info: {\n    label: 'Google AI - Gemini 1.5 Flash',\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      systemRole: true,\n      output: ['text', 'json'],\n    },\n    versions: [\n      'gemini-1.5-flash',\n      'gemini-1.5-flash-001',\n      'gemini-1.5-flash-002',\n      'gemini-1.5-flash-8b-exp-0924',\n      'gemini-1.5-flash-8b-exp-0827',\n      'gemini-1.5-flash-exp-0827',\n    ],\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini15Flash8B = modelRef({\n  name: 'googleai/gemini-1.5-flash-8b-latest',\n  info: {\n    label: 'Google AI - Gemini 1.5 Flash-8B',\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      systemRole: true,\n      output: ['text', 'json'],\n    },\n    versions: ['gemini-1.5-flash-8b', 'gemini-1.5-flash-8b-001'],\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const geminiUltra = modelRef({\n  name: 'googleai/gemini-ultra',\n  info: {\n    label: 'Google AI - Gemini Ultra',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: false,\n      tools: true,\n      systemRole: true,\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const SUPPORTED_V1_MODELS: Record<\n  string,\n  ModelReference<z.ZodTypeAny>\n> = {\n  'gemini-pro': geminiPro,\n  'gemini-pro-vision': geminiProVision,\n  // 'gemini-ultra': geminiUltra,\n};\n\nexport const SUPPORTED_V15_MODELS: Record<\n  string,\n  ModelReference<z.ZodTypeAny>\n> = {\n  'gemini-1.5-pro-latest': gemini15Pro,\n  'gemini-1.5-flash-latest': gemini15Flash,\n  'gemini-1.5-flash-8b-latest': gemini15Flash8B,\n};\n\nconst SUPPORTED_MODELS = {\n  ...SUPPORTED_V1_MODELS,\n  ...SUPPORTED_V15_MODELS,\n};\n\nfunction toGeminiRole(\n  role: MessageData['role'],\n  model?: ModelReference<z.ZodTypeAny>\n): string {\n  switch (role) {\n    case 'user':\n      return 'user';\n    case 'model':\n      return 'model';\n    case 'system':\n      if (model && SUPPORTED_V15_MODELS[model.name]) {\n        // We should have already pulled out the supported system messages,\n        // anything remaining is unsupported; throw an error.\n        throw new Error(\n          'system role is only supported for a single message in the first position'\n        );\n      } else {\n        throw new Error('system role is not supported');\n      }\n    case 'tool':\n      return 'function';\n    default:\n      return 'user';\n  }\n}\n\nfunction convertSchemaProperty(property) {\n  if (!property) {\n    return null;\n  }\n  if (property.type === 'object') {\n    const nestedProperties = {};\n    Object.keys(property.properties).forEach((key) => {\n      nestedProperties[key] = convertSchemaProperty(property.properties[key]);\n    });\n    return {\n      type: FunctionDeclarationSchemaType.OBJECT,\n      properties: nestedProperties,\n      required: property.required,\n    };\n  } else if (property.type === 'array') {\n    return {\n      type: FunctionDeclarationSchemaType.ARRAY,\n      items: convertSchemaProperty(property.items),\n    };\n  } else {\n    return {\n      type: FunctionDeclarationSchemaType[property.type.toUpperCase()],\n    };\n  }\n}\n\nfunction toGeminiTool(\n  tool: z.infer<typeof ToolDefinitionSchema>\n): FunctionDeclaration {\n  const declaration: FunctionDeclaration = {\n    name: tool.name.replace(/\\//g, '__'), // Gemini throws on '/' in tool name\n    description: tool.description,\n    parameters: convertSchemaProperty(tool.inputSchema),\n  };\n  return declaration;\n}\n\nfunction toInlineData(part: MediaPart): InlineDataPart {\n  const dataUrl = part.media.url;\n  const b64Data = dataUrl.substring(dataUrl.indexOf(',')! + 1);\n  const contentType =\n    part.media.contentType ||\n    dataUrl.substring(dataUrl.indexOf(':')! + 1, dataUrl.indexOf(';'));\n  return { inlineData: { mimeType: contentType, data: b64Data } };\n}\n\nfunction toFileData(part: MediaPart): FileDataPart {\n  if (!part.media.contentType)\n    throw new Error(\n      'Must supply a `contentType` when sending File URIs to Gemini.'\n    );\n  return {\n    fileData: { mimeType: part.media.contentType, fileUri: part.media.url },\n  };\n}\n\nfunction fromInlineData(inlinePart: InlineDataPart): MediaPart {\n  // Check if the required properties exist\n  if (\n    !inlinePart.inlineData ||\n    !inlinePart.inlineData.hasOwnProperty('mimeType') ||\n    !inlinePart.inlineData.hasOwnProperty('data')\n  ) {\n    throw new Error('Invalid InlineDataPart: missing required properties');\n  }\n  const { mimeType, data } = inlinePart.inlineData;\n  // Combine data and mimeType into a data URL\n  const dataUrl = `data:${mimeType};base64,${data}`;\n  return {\n    media: {\n      url: dataUrl,\n      contentType: mimeType,\n    },\n  };\n}\n\nfunction toFunctionCall(part: ToolRequestPart): FunctionCallPart {\n  if (!part?.toolRequest?.input) {\n    throw Error('Invalid ToolRequestPart: input was missing.');\n  }\n  return {\n    functionCall: {\n      name: part.toolRequest.name,\n      args: part.toolRequest.input,\n    },\n  };\n}\n\nfunction fromFunctionCall(part: FunctionCallPart): ToolRequestPart {\n  if (!part.functionCall) {\n    throw Error('Invalid FunctionCallPart');\n  }\n  return {\n    toolRequest: {\n      name: part.functionCall.name,\n      input: part.functionCall.args,\n    },\n  };\n}\n\nfunction toFunctionResponse(part: ToolResponsePart): FunctionResponsePart {\n  if (!part?.toolResponse?.output) {\n    throw Error('Invalid ToolResponsePart: output was missing.');\n  }\n  return {\n    functionResponse: {\n      name: part.toolResponse.name,\n      response: {\n        name: part.toolResponse.name,\n        content: part.toolResponse.output,\n      },\n    },\n  };\n}\n\nfunction fromFunctionResponse(part: FunctionResponsePart): ToolResponsePart {\n  if (!part.functionResponse) {\n    throw new Error('Invalid FunctionResponsePart.');\n  }\n  return {\n    toolResponse: {\n      name: part.functionResponse.name.replace(/__/g, '/'), // restore slashes\n      output: part.functionResponse.response,\n    },\n  };\n}\n\nfunction fromExecutableCode(part: GeminiPart): Part {\n  if (!part.executableCode) {\n    throw new Error('Invalid GeminiPart: missing executableCode');\n  }\n  return {\n    custom: {\n      executableCode: {\n        language: part.executableCode.language,\n        code: part.executableCode.code,\n      },\n    },\n  };\n}\n\nfunction fromCodeExecutionResult(part: GeminiPart): Part {\n  if (!part.codeExecutionResult) {\n    throw new Error('Invalid GeminiPart: missing codeExecutionResult');\n  }\n  return {\n    custom: {\n      codeExecutionResult: {\n        outcome: part.codeExecutionResult.outcome,\n        output: part.codeExecutionResult.output,\n      },\n    },\n  };\n}\n\nfunction toCustomPart(part: Part): GeminiPart {\n  if (!part.custom) {\n    throw new Error('Invalid GeminiPart: missing custom');\n  }\n  if (part.custom.codeExecutionResult) {\n    return { codeExecutionResult: part.custom.codeExecutionResult };\n  }\n  if (part.custom.executableCode) {\n    return { executableCode: part.custom.executableCode };\n  }\n  throw new Error('Unsupported Custom Part type');\n}\n\nfunction toGeminiPart(part: Part): GeminiPart {\n  if (part.text !== undefined) return { text: part.text };\n  if (part.media) {\n    if (part.media.url.startsWith('data:')) return toInlineData(part);\n    return toFileData(part);\n  }\n  if (part.toolRequest) return toFunctionCall(part);\n  if (part.toolResponse) return toFunctionResponse(part);\n  if (part.custom) return toCustomPart(part);\n  throw new Error('Unsupported Part type');\n}\n\nfunction fromGeminiPart(part: GeminiPart, jsonMode: boolean): Part {\n  if (jsonMode && part.text !== undefined) {\n    return { data: extractJson(part.text) };\n  }\n  if (part.text !== undefined) return { text: part.text };\n  if (part.inlineData) return fromInlineData(part);\n  if (part.functionCall) return fromFunctionCall(part);\n  if (part.functionResponse) return fromFunctionResponse(part);\n  if (part.executableCode) return fromExecutableCode(part);\n  if (part.codeExecutionResult) return fromCodeExecutionResult(part);\n  throw new Error('Unsupported GeminiPart type');\n}\n\nexport function toGeminiMessage(\n  message: MessageData,\n  model?: ModelReference<z.ZodTypeAny>\n): GeminiMessage {\n  return {\n    role: toGeminiRole(message.role, model),\n    parts: message.content.map(toGeminiPart),\n  };\n}\n\nexport function toGeminiSystemInstruction(message: MessageData): GeminiMessage {\n  return {\n    role: 'user',\n    parts: message.content.map(toGeminiPart),\n  };\n}\n\nfunction fromGeminiFinishReason(\n  reason: GeminiCandidate['finishReason']\n): CandidateData['finishReason'] {\n  if (!reason) return 'unknown';\n  switch (reason) {\n    case 'STOP':\n      return 'stop';\n    case 'MAX_TOKENS':\n      return 'length';\n    case 'SAFETY': // blocked for safety\n    case 'RECITATION': // blocked for reciting training data\n      return 'blocked';\n    default:\n      return 'unknown';\n  }\n}\n\nexport function fromGeminiCandidate(\n  candidate: GeminiCandidate,\n  jsonMode: boolean = false\n): CandidateData {\n  return {\n    index: candidate.index || 0, // reasonable default?\n    message: {\n      role: 'model',\n      content: (candidate.content?.parts || []).map((part) =>\n        fromGeminiPart(part, jsonMode)\n      ),\n    },\n    finishReason: fromGeminiFinishReason(candidate.finishReason),\n    finishMessage: candidate.finishMessage,\n    custom: {\n      safetyRatings: candidate.safetyRatings,\n      citationMetadata: candidate.citationMetadata,\n    },\n  };\n}\n\n/**\n *\n */\nexport function googleAIModel(\n  name: string,\n  apiKey?: string,\n  apiVersion?: string,\n  baseUrl?: string\n): ModelAction {\n  const modelName = `googleai/${name}`;\n\n  if (!apiKey) {\n    apiKey = process.env.GOOGLE_GENAI_API_KEY || process.env.GOOGLE_API_KEY;\n  }\n  if (!apiKey) {\n    throw new Error(\n      'Please pass in the API key or set the GOOGLE_GENAI_API_KEY or GOOGLE_API_KEY environment variable.\\n' +\n        'For more details see https://firebase.google.com/docs/genkit/plugins/google-genai'\n    );\n  }\n\n  const model: ModelReference<z.ZodTypeAny> = SUPPORTED_MODELS[name];\n  if (!model) throw new Error(`Unsupported model: ${name}`);\n\n  const middleware: ModelMiddleware[] = [];\n  if (SUPPORTED_V1_MODELS[name]) {\n    middleware.push(simulateSystemPrompt());\n  }\n  if (model?.info?.supports?.media) {\n    // the gemini api doesn't support downloading media from http(s)\n    middleware.push(\n      downloadRequestMedia({\n        maxBytes: 1024 * 1024 * 10,\n        // don't downlaod files that have been uploaded using the Files API\n        filter: (part) =>\n          !part.media.url.startsWith(\n            'https://generativelanguage.googleapis.com/'\n          ),\n      })\n    );\n  }\n\n  return defineModel(\n    {\n      name: modelName,\n      ...model.info,\n      configSchema: model.configSchema,\n      use: middleware,\n    },\n    async (request, streamingCallback) => {\n      const options: RequestOptions = { apiClient: GENKIT_CLIENT_HEADER };\n      if (apiVersion) {\n        options.apiVersion = apiVersion;\n      }\n      if (apiVersion) {\n        options.baseUrl = baseUrl;\n      }\n      const client = new GoogleGenerativeAI(apiKey!).getGenerativeModel(\n        {\n          model: request.config?.version || model.version || name,\n        },\n        options\n      );\n\n      // make a copy so that modifying the request will not produce side-effects\n      const messages = [...request.messages];\n      if (messages.length === 0) throw new Error('No messages provided.');\n\n      // Gemini does not support messages with role system and instead expects\n      // systemInstructions to be provided as a separate input. The first\n      // message detected with role=system will be used for systemInstructions.\n      // Any additional system messages may be considered to be \"exceptional\".\n      let systemInstruction: GeminiMessage | undefined = undefined;\n      if (SUPPORTED_V15_MODELS[name]) {\n        const systemMessage = messages.find((m) => m.role === 'system');\n        if (systemMessage) {\n          messages.splice(messages.indexOf(systemMessage), 1);\n          systemInstruction = toGeminiSystemInstruction(systemMessage);\n        }\n      }\n\n      const tools: Tool[] = [];\n\n      if (request.tools?.length) {\n        tools.push({\n          functionDeclarations: request.tools.map(toGeminiTool),\n        });\n      }\n\n      if (request.config?.codeExecution) {\n        tools.push({\n          codeExecution:\n            request.config.codeExecution === true\n              ? {}\n              : request.config.codeExecution,\n        });\n      }\n\n      //  cannot use tools with json mode\n      const jsonMode =\n        (request.output?.format === 'json' || !!request.output?.schema) &&\n        tools.length === 0;\n\n      const generationConfig: GenerationConfig = {\n        candidateCount: request.candidates || undefined,\n        temperature: request.config?.temperature,\n        maxOutputTokens: request.config?.maxOutputTokens,\n        topK: request.config?.topK,\n        topP: request.config?.topP,\n        stopSequences: request.config?.stopSequences,\n        responseMimeType: jsonMode ? 'application/json' : undefined,\n      };\n\n      const chatRequest = {\n        systemInstruction,\n        generationConfig,\n        tools,\n        history: messages\n          .slice(0, -1)\n          .map((message) => toGeminiMessage(message, model)),\n        safetySettings: request.config?.safetySettings,\n      } as StartChatParams;\n      const msg = toGeminiMessage(messages[messages.length - 1], model);\n      const fromJSONModeScopedGeminiCandidate = (\n        candidate: GeminiCandidate\n      ) => {\n        return fromGeminiCandidate(candidate, jsonMode);\n      };\n      if (streamingCallback) {\n        const result = await client\n          .startChat(chatRequest)\n          .sendMessageStream(msg.parts, options);\n        for await (const item of result.stream) {\n          (item as GenerateContentResponse).candidates?.forEach((candidate) => {\n            const c = fromJSONModeScopedGeminiCandidate(candidate);\n            streamingCallback({\n              index: c.index,\n              content: c.message.content,\n            });\n          });\n        }\n        const response = await result.response;\n        if (!response.candidates?.length) {\n          throw new Error('No valid candidates returned.');\n        }\n        return {\n          candidates:\n            response.candidates?.map(fromJSONModeScopedGeminiCandidate) || [],\n          custom: response,\n        };\n      } else {\n        const result = await client\n          .startChat(chatRequest)\n          .sendMessage(msg.parts, options);\n        if (!result.response.candidates?.length)\n          throw new Error('No valid candidates returned.');\n        const responseCandidates =\n          result.response.candidates?.map(fromJSONModeScopedGeminiCandidate) ||\n          [];\n        return {\n          candidates: responseCandidates,\n          custom: result.response,\n          usage: {\n            ...getBasicUsageStats(request.messages, responseCandidates),\n            inputTokens: result.response.usageMetadata?.promptTokenCount,\n            outputTokens: result.response.usageMetadata?.candidatesTokenCount,\n            totalTokens: result.response.usageMetadata?.totalTokenCount,\n          },\n        };\n      }\n    }\n  );\n}\n"],"mappings":"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","names":["z","process","_a","_b"]}