"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var gcpLogger_exports = {};
__export(gcpLogger_exports, {
  GcpLogger: () => GcpLogger,
  __addTransportStreamForTesting: () => __addTransportStreamForTesting
});
module.exports = __toCommonJS(gcpLogger_exports);
var import_logging_winston = require("@google-cloud/logging-winston");
let additionalStream;
class GcpLogger {
  constructor(config) {
    this.config = config;
  }
  getLogger(env) {
    return __async(this, null, function* () {
      const winston = yield import("winston");
      const format = this.shouldExport(env) ? { format: winston.format.json() } : {
        format: winston.format.printf((info) => {
          return `[${info.level}] ${info.message}`;
        })
      };
      let transports = [];
      transports.push(
        this.shouldExport(env) ? new import_logging_winston.LoggingWinston({
          projectId: this.config.projectId,
          labels: { module: "genkit" },
          prefix: "genkit",
          logName: "genkit_log",
          credentials: this.config.credentials
        }) : new winston.transports.Console()
      );
      if (additionalStream) {
        transports.push(
          new winston.transports.Stream({ stream: additionalStream })
        );
      }
      return winston.createLogger(__spreadValues({
        transports
      }, format));
    });
  }
  shouldExport(env) {
    return this.config.telemetry.export;
  }
}
function __addTransportStreamForTesting(stream) {
  additionalStream = stream;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  GcpLogger,
  __addTransportStreamForTesting
});
//# sourceMappingURL=gcpLogger.js.map