{"version":3,"sources":["../../src/telemetry/action.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GENKIT_VERSION } from '@genkit-ai/core';\nimport { logger } from '@genkit-ai/core/logging';\nimport { PathMetadata } from '@genkit-ai/core/tracing';\nimport { ValueType } from '@opentelemetry/api';\nimport { hrTimeDuration, hrTimeToMilliseconds } from '@opentelemetry/core';\nimport {\n  MetricCounter,\n  MetricHistogram,\n  Telemetry,\n  internalMetricNamespaceWrap,\n} from '../metrics.js';\nimport { extractErrorName, extractOuterFlowNameFromPath } from '../utils';\n\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\n\nclass ActionTelemetry implements Telemetry {\n  /**\n   * Wraps the declared metrics in a Genkit-specific, internal namespace.\n   */\n  private _N = internalMetricNamespaceWrap.bind(null, 'action');\n\n  private actionCounter = new MetricCounter(this._N('requests'), {\n    description: 'Counts calls to genkit actions.',\n    valueType: ValueType.INT,\n  });\n\n  private actionLatencies = new MetricHistogram(this._N('latency'), {\n    description: 'Latencies when calling Genkit actions.',\n    valueType: ValueType.DOUBLE,\n    unit: 'ms',\n  });\n\n  tick(\n    span: ReadableSpan,\n    paths: Set<PathMetadata>,\n    logIO: boolean,\n    projectId?: string\n  ): void {\n    const attributes = span.attributes;\n\n    const actionName = (attributes['genkit:name'] as string) || '<unknown>';\n    const path = (attributes['genkit:path'] as string) || '<unknown>';\n    const flowName =\n      (attributes['genkit:metadata:flow:name'] as string) ||\n      extractOuterFlowNameFromPath(path);\n    const state = attributes['genkit:state'] || 'success';\n    const latencyMs = hrTimeToMilliseconds(\n      hrTimeDuration(span.startTime, span.endTime)\n    );\n    const errorName = extractErrorName(span.events);\n\n    if (state === 'success') {\n      this.writeSuccess(actionName, flowName, path, latencyMs);\n      return;\n    }\n    if (state === 'error') {\n      this.writeFailure(actionName, flowName, path, latencyMs, errorName);\n    }\n\n    logger.warn(`Unknown action state; ${state}`);\n  }\n\n  private writeSuccess(\n    actionName: string,\n    flowName: string,\n    path: string,\n    latencyMs: number\n  ) {\n    const dimensions = {\n      name: actionName,\n      flowName,\n      path,\n      status: 'success',\n      source: 'ts',\n      sourceVersion: GENKIT_VERSION,\n    };\n    this.actionCounter.add(1, dimensions);\n    this.actionLatencies.record(latencyMs, dimensions);\n  }\n\n  private writeFailure(\n    actionName: string,\n    flowName: string,\n    path: string,\n    latencyMs: number,\n    errorName?: string\n  ) {\n    const dimensions = {\n      name: actionName,\n      flowName,\n      path,\n      source: 'ts',\n      sourceVersion: GENKIT_VERSION,\n      status: 'failure',\n      error: errorName,\n    };\n    this.actionCounter.add(1, dimensions);\n    this.actionLatencies.record(latencyMs, dimensions);\n  }\n}\n\nconst actionTelemetry = new ActionTelemetry();\nexport { actionTelemetry };\n"],"mappings":";AAgBA,SAAS,sBAAsB;AAC/B,SAAS,cAAc;AAEvB,SAAS,iBAAiB;AAC1B,SAAS,gBAAgB,4BAA4B;AACrD;AAAA,EACE;AAAA,EACA;AAAA,EAEA;AAAA,OACK;AACP,SAAS,kBAAkB,oCAAoC;AAI/D,MAAM,gBAAqC;AAAA,EAA3C;AAIE;AAAA;AAAA;AAAA,SAAQ,KAAK,4BAA4B,KAAK,MAAM,QAAQ;AAE5D,SAAQ,gBAAgB,IAAI,cAAc,KAAK,GAAG,UAAU,GAAG;AAAA,MAC7D,aAAa;AAAA,MACb,WAAW,UAAU;AAAA,IACvB,CAAC;AAED,SAAQ,kBAAkB,IAAI,gBAAgB,KAAK,GAAG,SAAS,GAAG;AAAA,MAChE,aAAa;AAAA,MACb,WAAW,UAAU;AAAA,MACrB,MAAM;AAAA,IACR,CAAC;AAAA;AAAA,EAED,KACE,MACA,OACA,OACA,WACM;AACN,UAAM,aAAa,KAAK;AAExB,UAAM,aAAc,WAAW,aAAa,KAAgB;AAC5D,UAAM,OAAQ,WAAW,aAAa,KAAgB;AACtD,UAAM,WACH,WAAW,2BAA2B,KACvC,6BAA6B,IAAI;AACnC,UAAM,QAAQ,WAAW,cAAc,KAAK;AAC5C,UAAM,YAAY;AAAA,MAChB,eAAe,KAAK,WAAW,KAAK,OAAO;AAAA,IAC7C;AACA,UAAM,YAAY,iBAAiB,KAAK,MAAM;AAE9C,QAAI,UAAU,WAAW;AACvB,WAAK,aAAa,YAAY,UAAU,MAAM,SAAS;AACvD;AAAA,IACF;AACA,QAAI,UAAU,SAAS;AACrB,WAAK,aAAa,YAAY,UAAU,MAAM,WAAW,SAAS;AAAA,IACpE;AAEA,WAAO,KAAK,yBAAyB,KAAK,EAAE;AAAA,EAC9C;AAAA,EAEQ,aACN,YACA,UACA,MACA,WACA;AACA,UAAM,aAAa;AAAA,MACjB,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,eAAe;AAAA,IACjB;AACA,SAAK,cAAc,IAAI,GAAG,UAAU;AACpC,SAAK,gBAAgB,OAAO,WAAW,UAAU;AAAA,EACnD;AAAA,EAEQ,aACN,YACA,UACA,MACA,WACA,WACA;AACA,UAAM,aAAa;AAAA,MACjB,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR,eAAe;AAAA,MACf,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AACA,SAAK,cAAc,IAAI,GAAG,UAAU;AACpC,SAAK,gBAAgB,OAAO,WAAW,UAAU;AAAA,EACnD;AACF;AAEA,MAAM,kBAAkB,IAAI,gBAAgB;","names":[]}