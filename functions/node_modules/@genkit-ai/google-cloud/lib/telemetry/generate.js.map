{"version":3,"sources":["../../src/telemetry/generate.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GenerateRequestData,\n  GenerateResponseData,\n  GenerationUsage,\n  MediaPart,\n  Part,\n  ToolRequestPart,\n  ToolResponsePart,\n} from '@genkit-ai/ai';\nimport { GENKIT_VERSION } from '@genkit-ai/core';\nimport { logger } from '@genkit-ai/core/logging';\nimport { PathMetadata, toDisplayPath } from '@genkit-ai/core/tracing';\nimport { ValueType } from '@opentelemetry/api';\nimport { createHash } from 'crypto';\nimport {\n  MetricCounter,\n  MetricHistogram,\n  internalMetricNamespaceWrap,\n} from '../metrics';\n\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport truncate from 'truncate-utf8-bytes';\nimport { Telemetry } from '../metrics';\nimport {\n  createCommonLogAttributes,\n  extractErrorName,\n  extractOuterFlowNameFromPath,\n} from '../utils';\n\ntype SharedDimensions = {\n  modelName?: string;\n  flowName?: string;\n  path?: string;\n  temperature?: number;\n  topK?: number;\n  topP?: number;\n  status?: string;\n  source?: string;\n  sourceVersion?: string;\n};\n\nclass GenerateTelemetry implements Telemetry {\n  /**\n   * Wraps the declared metrics in a Genkit-specific, internal namespace.\n   */\n  private _N = internalMetricNamespaceWrap.bind(null, 'ai');\n\n  /** The maximum length (in bytes) of a logged prompt message. The maximum log\n   * size in GCP is 256kb, so using slightly lower for some buffer for the rest\n   * of the message*/\n  private MAX_LOG_CONTENT_BYTES = 200_000;\n\n  private actionCounter = new MetricCounter(this._N('generate/requests'), {\n    description: 'Counts calls to genkit generate actions.',\n    valueType: ValueType.INT,\n  });\n\n  private latencies = new MetricHistogram(this._N('generate/latency'), {\n    description: 'Latencies when interacting with a Genkit model.',\n    valueType: ValueType.DOUBLE,\n    unit: 'ms',\n  });\n\n  private inputCharacters = new MetricCounter(\n    this._N('generate/input/characters'),\n    {\n      description: 'Counts input characters to any Genkit model.',\n      valueType: ValueType.INT,\n    }\n  );\n\n  private inputTokens = new MetricCounter(this._N('generate/input/tokens'), {\n    description: 'Counts input tokens to a Genkit model.',\n    valueType: ValueType.INT,\n  });\n\n  private inputImages = new MetricCounter(this._N('generate/input/images'), {\n    description: 'Counts input images to a Genkit model.',\n    valueType: ValueType.INT,\n  });\n\n  private inputVideos = new MetricCounter(this._N('generate/input/videos'), {\n    description: 'Counts input videos to a Genkit model.',\n    valueType: ValueType.INT,\n  });\n\n  private inputAudio = new MetricCounter(this._N('generate/input/audio'), {\n    description: 'Counts input audio files to a Genkit model.',\n    valueType: ValueType.INT,\n  });\n\n  private outputCharacters = new MetricCounter(\n    this._N('generate/output/characters'),\n    {\n      description: 'Counts output characters from a Genkit model.',\n      valueType: ValueType.INT,\n    }\n  );\n\n  private outputTokens = new MetricCounter(this._N('generate/output/tokens'), {\n    description: 'Counts output tokens from a Genkit model.',\n    valueType: ValueType.INT,\n  });\n\n  private outputImages = new MetricCounter(this._N('generate/output/images'), {\n    description: 'Count output images from a Genkit model.',\n    valueType: ValueType.INT,\n  });\n\n  private outputVideos = new MetricCounter(this._N('generate/output/videos'), {\n    description: 'Count output videos from a Genkit model.',\n    valueType: ValueType.INT,\n  });\n\n  private outputAudio = new MetricCounter(this._N('generate/output/audio'), {\n    description: 'Count output audio files from a Genkit model.',\n    valueType: ValueType.INT,\n  });\n\n  tick(\n    span: ReadableSpan,\n    paths: Set<PathMetadata>,\n    logIO: boolean,\n    projectId?: string\n  ): void {\n    const attributes = span.attributes;\n    const modelName = attributes['genkit:name'] as string;\n    const path = (attributes['genkit:path'] as string) || '';\n    const input =\n      'genkit:input' in attributes\n        ? (JSON.parse(\n            attributes['genkit:input']! as string\n          ) as GenerateRequestData)\n        : undefined;\n    const output =\n      'genkit:output' in attributes\n        ? (JSON.parse(\n            attributes['genkit:output']! as string\n          ) as GenerateResponseData)\n        : undefined;\n\n    const errName = extractErrorName(span.events);\n    const flowName = extractOuterFlowNameFromPath(path);\n\n    if (input) {\n      this.recordGenerateActionMetrics(modelName, flowName, path, input, {\n        response: output,\n        errName,\n      });\n      this.recordGenerateActionConfigLogs(\n        span,\n        modelName,\n        flowName,\n        path,\n        input,\n        projectId\n      );\n\n      if (logIO) {\n        this.recordGenerateActionInputLogs(\n          span,\n          modelName,\n          flowName,\n          path,\n          input,\n          projectId\n        );\n      }\n    }\n\n    if (output && logIO) {\n      this.recordGenerateActionOutputLogs(\n        span,\n        modelName,\n        flowName,\n        path,\n        output,\n        projectId\n      );\n    }\n  }\n\n  private recordGenerateActionMetrics(\n    modelName: string,\n    flowName: string | undefined,\n    path: string,\n    input: GenerateRequestData,\n    opts: {\n      response?: GenerateResponseData;\n      errName?: string;\n    }\n  ) {\n    this.doRecordGenerateActionMetrics(modelName, opts.response?.usage || {}, {\n      temperature: input.config?.temperature,\n      topK: input.config?.topK,\n      topP: input.config?.topP,\n      maxOutputTokens: input.config?.maxOutputTokens,\n      flowName,\n      path,\n      latencyMs: opts.response?.latencyMs,\n      errName: opts.errName,\n      source: 'ts',\n      sourceVersion: GENKIT_VERSION,\n    });\n  }\n\n  private recordGenerateActionConfigLogs(\n    span: ReadableSpan,\n    model: string,\n    flowName: string | undefined,\n    qualifiedPath: string,\n    input: GenerateRequestData,\n    projectId?: string\n  ) {\n    const path = toDisplayPath(qualifiedPath);\n    const sharedMetadata = {\n      ...createCommonLogAttributes(span, projectId),\n      model,\n      path,\n      qualifiedPath,\n      flowName,\n    };\n    logger.logStructured(`Config[${path}, ${model}]`, {\n      ...sharedMetadata,\n      temperature: input.config?.temperature,\n      topK: input.config?.topK,\n      topP: input.config?.topP,\n      maxOutputTokens: input.config?.maxOutputTokens,\n      stopSequences: input.config?.stopSequences,\n      source: 'ts',\n      sourceVersion: GENKIT_VERSION,\n    });\n  }\n\n  private recordGenerateActionInputLogs(\n    span: ReadableSpan,\n    model: string,\n    flowName: string | undefined,\n    qualifiedPath: string,\n    input: GenerateRequestData,\n    projectId?: string\n  ) {\n    const path = toDisplayPath(qualifiedPath);\n    const sharedMetadata = {\n      ...createCommonLogAttributes(span, projectId),\n      model,\n      path,\n      qualifiedPath,\n      flowName,\n    };\n\n    const messages = input.messages.length;\n    input.messages.forEach((msg, msgIdx) => {\n      const parts = msg.content.length;\n      msg.content.forEach((part, partIdx) => {\n        const partCounts = this.toPartCounts(partIdx, parts, msgIdx, messages);\n        logger.logStructured(`Input[${path}, ${model}] ${partCounts}`, {\n          ...sharedMetadata,\n          content: this.toPartLogContent(part),\n          partIndex: partIdx,\n          totalParts: parts,\n          messageIndex: msgIdx,\n          totalMessages: messages,\n        });\n      });\n    });\n  }\n\n  private recordGenerateActionOutputLogs(\n    span: ReadableSpan,\n    model: string,\n    flowName: string | undefined,\n    qualifiedPath: string,\n    output: GenerateResponseData,\n    projectId?: string\n  ) {\n    const path = toDisplayPath(qualifiedPath);\n    const sharedMetadata = {\n      ...createCommonLogAttributes(span, projectId),\n      model,\n      path,\n      qualifiedPath,\n      flowName,\n    };\n    const candidates = output.candidates.length;\n\n    output.candidates.forEach((cand, candIdx) => {\n      const parts = cand.message.content.length;\n      const candCounts = parts > 1 ? ` (${candIdx + 1} of ${parts})` : '';\n      logger.logStructured(`Output Candidate[${path}, ${model}]${candCounts}`, {\n        ...sharedMetadata,\n        candidateIndex: candIdx,\n        totalCandidates: candidates,\n        messageIndex: cand.index,\n        finishReason: cand.finishReason,\n        finishMessage: cand.finishMessage,\n        role: cand.message.role,\n        usage: cand.usage,\n        custom: cand.custom,\n      });\n      cand.message.content.forEach((part, partIdx) => {\n        const partCounts = this.toPartCounts(\n          partIdx,\n          parts,\n          candIdx,\n          candidates\n        );\n        const initial = cand.finishMessage\n          ? { finishMessage: this.toPartLogText(cand.finishMessage) }\n          : {};\n        logger.logStructured(`Output[${path}, ${model}] ${partCounts}`, {\n          ...initial,\n          ...sharedMetadata,\n          content: this.toPartLogContent(part),\n          partIndex: partIdx,\n          totalParts: parts,\n          candidateIndex: candIdx,\n          totalCandidates: candidates,\n          messageIndex: cand.index,\n          finishReason: cand.finishReason,\n        });\n      });\n      if (output.usage) {\n        logger.logStructured(`Usage[${path}, ${model}]`, {\n          ...sharedMetadata,\n          usage: output.usage,\n        });\n      }\n    });\n  }\n\n  private toPartCounts(\n    partOrdinal: number,\n    parts: number,\n    msgOrdinal: number,\n    messages: number\n  ): string {\n    if (parts > 1 && messages > 1) {\n      return `(part ${this.xOfY(partOrdinal, parts)} in message ${this.xOfY(\n        msgOrdinal,\n        messages\n      )})`;\n    }\n    if (parts > 1) {\n      return `(part ${this.xOfY(partOrdinal, parts)})`;\n    }\n    if (messages > 1) {\n      return `(message ${this.xOfY(msgOrdinal, messages)})`;\n    }\n    return '';\n  }\n\n  private xOfY(x: number, y: number): string {\n    return `${x} of ${y}`;\n  }\n\n  private toPartLogContent(part: Part): string {\n    if (part.text) {\n      return this.toPartLogText(part.text);\n    }\n    if (part.media) {\n      return this.toPartLogMedia(part);\n    }\n    if (part.toolRequest) {\n      return this.toPartLogToolRequest(part);\n    }\n    if (part.toolResponse) {\n      return this.toPartLogToolResponse(part);\n    }\n    return '<unknown format>';\n  }\n\n  private toPartLogText(text: string): string {\n    return truncate(text, this.MAX_LOG_CONTENT_BYTES);\n  }\n\n  private toPartLogMedia(part: MediaPart): string {\n    if (part.media.url.startsWith('data:')) {\n      const splitIdx = part.media.url.indexOf('base64,');\n      if (splitIdx < 0) {\n        return '<unknown media format>';\n      }\n      const prefix = part.media.url.substring(0, splitIdx + 7);\n      const hashedContent = createHash('sha256')\n        .update(part.media.url.substring(splitIdx + 7))\n        .digest('hex');\n      return `${prefix}<sha256(${hashedContent})>`;\n    }\n    return this.toPartLogText(part.media.url);\n  }\n\n  private toPartLogToolRequest(part: ToolRequestPart): string {\n    const inputText =\n      typeof part.toolRequest.input === 'string'\n        ? part.toolRequest.input\n        : JSON.stringify(part.toolRequest.input);\n    return this.toPartLogText(\n      `Tool request: ${part.toolRequest.name}, ref: ${part.toolRequest.ref}, input: ${inputText}`\n    );\n  }\n\n  private toPartLogToolResponse(part: ToolResponsePart): string {\n    const outputText =\n      typeof part.toolResponse.output === 'string'\n        ? part.toolResponse.output\n        : JSON.stringify(part.toolResponse.output);\n    return this.toPartLogText(\n      `Tool response: ${part.toolResponse.name}, ref: ${part.toolResponse.ref}, output: ${outputText}`\n    );\n  }\n\n  /**\n   * Records all metrics associated with performing a GenerateAction.\n   */\n  private doRecordGenerateActionMetrics(\n    modelName: string,\n    usage: GenerationUsage,\n    dimensions: {\n      flowName?: string;\n      path?: string;\n      temperature?: number;\n      maxOutputTokens?: number;\n      topK?: number;\n      topP?: number;\n      latencyMs?: number;\n      errName?: string;\n      source?: string;\n      sourceVersion: string;\n    }\n  ) {\n    const shared: SharedDimensions = {\n      modelName: modelName,\n      flowName: dimensions.flowName,\n      path: dimensions.path,\n      temperature: dimensions.temperature,\n      topK: dimensions.topK,\n      topP: dimensions.topP,\n      source: dimensions.source,\n      sourceVersion: dimensions.sourceVersion,\n      status: dimensions.errName ? 'failure' : 'success',\n    };\n\n    this.actionCounter.add(1, {\n      maxOutputTokens: dimensions.maxOutputTokens,\n      error: dimensions.errName,\n      ...shared,\n    });\n\n    this.latencies.record(dimensions.latencyMs, shared);\n\n    // inputs\n    this.inputTokens.add(usage.inputTokens, shared);\n    this.inputCharacters.add(usage.inputCharacters, shared);\n    this.inputImages.add(usage.inputImages, shared);\n    this.inputVideos.add(usage.inputVideos, shared);\n    this.inputAudio.add(usage.inputAudioFiles, shared);\n\n    // outputs\n    this.outputTokens.add(usage.outputTokens, shared);\n    this.outputCharacters.add(usage.outputCharacters, shared);\n    this.outputImages.add(usage.outputImages, shared);\n    this.outputVideos.add(usage.outputVideos, shared);\n    this.outputAudio.add(usage.outputAudioFiles, shared);\n  }\n}\n\nconst generateTelemetry = new GenerateTelemetry();\nexport { generateTelemetry };\n"],"mappings":"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","names":["truncate"]}