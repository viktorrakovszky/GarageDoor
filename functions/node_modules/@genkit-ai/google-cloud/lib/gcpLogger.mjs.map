{"version":3,"sources":["../src/gcpLogger.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerConfig } from '@genkit-ai/core';\nimport { LoggingWinston } from '@google-cloud/logging-winston';\nimport { Writable } from 'stream';\nimport { GcpPluginConfig } from './types';\n\n/**\n * Additional streams for writing log data to. Useful for unit testing.\n */\nlet additionalStream: Writable;\n\n/**\n * Provides a {LoggerConfig} for exporting Genkit debug logs to GCP Cloud\n * logs.\n */\nexport class GcpLogger implements LoggerConfig {\n  constructor(private readonly config: GcpPluginConfig) {}\n\n  async getLogger(env: string) {\n    // Dynamically importing winston here more strictly controls\n    // the import order relative to registering instrumentation\n    // with OpenTelemetry. Incorrect import order will trigger\n    // an internal OT warning and will result in logs not being\n    // associated with correct spans/traces.\n    const winston = await import('winston');\n    const format = this.shouldExport(env)\n      ? { format: winston.format.json() }\n      : {\n          format: winston.format.printf((info): string => {\n            return `[${info.level}] ${info.message}`;\n          }),\n        };\n\n    let transports: any[] = [];\n    transports.push(\n      this.shouldExport(env)\n        ? new LoggingWinston({\n            projectId: this.config.projectId,\n            labels: { module: 'genkit' },\n            prefix: 'genkit',\n            logName: 'genkit_log',\n            credentials: this.config.credentials,\n          })\n        : new winston.transports.Console()\n    );\n    if (additionalStream) {\n      transports.push(\n        new winston.transports.Stream({ stream: additionalStream })\n      );\n    }\n    return winston.createLogger({\n      transports: transports,\n      ...format,\n    });\n  }\n\n  private shouldExport(env?: string) {\n    return this.config.telemetry.export;\n  }\n}\n\nexport function __addTransportStreamForTesting(stream: Writable) {\n  additionalStream = stream;\n}\n"],"mappings":";;;;AAiBA,SAAS,sBAAsB;AAO/B,IAAI;AAMG,MAAM,UAAkC;AAAA,EAC7C,YAA6B,QAAyB;AAAzB;AAAA,EAA0B;AAAA,EAEjD,UAAU,KAAa;AAAA;AAM3B,YAAM,UAAU,MAAM,OAAO,SAAS;AACtC,YAAM,SAAS,KAAK,aAAa,GAAG,IAChC,EAAE,QAAQ,QAAQ,OAAO,KAAK,EAAE,IAChC;AAAA,QACE,QAAQ,QAAQ,OAAO,OAAO,CAAC,SAAiB;AAC9C,iBAAO,IAAI,KAAK,KAAK,KAAK,KAAK,OAAO;AAAA,QACxC,CAAC;AAAA,MACH;AAEJ,UAAI,aAAoB,CAAC;AACzB,iBAAW;AAAA,QACT,KAAK,aAAa,GAAG,IACjB,IAAI,eAAe;AAAA,UACjB,WAAW,KAAK,OAAO;AAAA,UACvB,QAAQ,EAAE,QAAQ,SAAS;AAAA,UAC3B,QAAQ;AAAA,UACR,SAAS;AAAA,UACT,aAAa,KAAK,OAAO;AAAA,QAC3B,CAAC,IACD,IAAI,QAAQ,WAAW,QAAQ;AAAA,MACrC;AACA,UAAI,kBAAkB;AACpB,mBAAW;AAAA,UACT,IAAI,QAAQ,WAAW,OAAO,EAAE,QAAQ,iBAAiB,CAAC;AAAA,QAC5D;AAAA,MACF;AACA,aAAO,QAAQ,aAAa;AAAA,QAC1B;AAAA,SACG,OACJ;AAAA,IACH;AAAA;AAAA,EAEQ,aAAa,KAAc;AACjC,WAAO,KAAK,OAAO,UAAU;AAAA,EAC/B;AACF;AAEO,SAAS,+BAA+B,QAAkB;AAC/D,qBAAmB;AACrB;","names":[]}