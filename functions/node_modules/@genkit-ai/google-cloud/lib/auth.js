"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var auth_exports = {};
__export(auth_exports, {
  credentialsFromEnvironment: () => credentialsFromEnvironment
});
module.exports = __toCommonJS(auth_exports);
var import_logging = require("@genkit-ai/core/logging");
var import_google_auth_library = require("google-auth-library");
function credentialsFromEnvironment() {
  return __async(this, null, function* () {
    let authClient;
    let options = {};
    if (process.env.GCLOUD_SERVICE_ACCOUNT_CREDS) {
      const serviceAccountCreds = JSON.parse(
        process.env.GCLOUD_SERVICE_ACCOUNT_CREDS
      );
      const authOptions = { credentials: serviceAccountCreds };
      authClient = new import_google_auth_library.GoogleAuth(authOptions);
      options.credentials = yield authClient.getCredentials();
    } else {
      authClient = new import_google_auth_library.GoogleAuth();
    }
    try {
      const projectId = yield authClient.getProjectId();
      if (projectId && projectId.length > 0) {
        options.projectId = projectId;
      }
    } catch (error) {
      import_logging.logger.warn(error);
    }
    return options;
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  credentialsFromEnvironment
});
//# sourceMappingURL=auth.js.map