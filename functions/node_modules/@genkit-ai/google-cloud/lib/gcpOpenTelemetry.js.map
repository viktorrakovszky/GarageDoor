{"version":3,"sources":["../src/gcpOpenTelemetry.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GENKIT_VERSION, TelemetryConfig } from '@genkit-ai/core';\nimport { MetricExporter } from '@google-cloud/opentelemetry-cloud-monitoring-exporter';\nimport { TraceExporter } from '@google-cloud/opentelemetry-cloud-trace-exporter';\nimport { GcpDetectorSync } from '@google-cloud/opentelemetry-resource-util';\nimport { Span, SpanStatusCode, TraceFlags } from '@opentelemetry/api';\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport {\n  ExportResult,\n  hrTimeDuration,\n  hrTimeToMilliseconds,\n} from '@opentelemetry/core';\nimport { Instrumentation } from '@opentelemetry/instrumentation';\nimport { PinoInstrumentation } from '@opentelemetry/instrumentation-pino';\nimport { WinstonInstrumentation } from '@opentelemetry/instrumentation-winston';\nimport { Resource } from '@opentelemetry/resources';\nimport {\n  AggregationTemporality,\n  DefaultAggregation,\n  ExponentialHistogramAggregation,\n  InMemoryMetricExporter,\n  InstrumentType,\n  PeriodicExportingMetricReader,\n  PushMetricExporter,\n} from '@opentelemetry/sdk-metrics';\nimport { NodeSDKConfiguration } from '@opentelemetry/sdk-node';\nimport {\n  BatchSpanProcessor,\n  InMemorySpanExporter,\n  ReadableSpan,\n  SpanExporter,\n} from '@opentelemetry/sdk-trace-base';\n\nimport { extractErrorName } from './utils';\n\nimport { PathMetadata } from '@genkit-ai/core/tracing';\nimport { actionTelemetry } from './telemetry/action.js';\nimport { flowsTelemetry } from './telemetry/flow.js';\nimport { generateTelemetry } from './telemetry/generate.js';\nimport { GcpPluginConfig } from './types';\n\nlet metricExporter: PushMetricExporter;\nlet spanProcessor: BatchSpanProcessor;\nlet spanExporter: AdjustingTraceExporter;\n\n/**\n * Provides a {TelemetryConfig} for exporting OpenTelemetry data (Traces,\n * Metrics, and Logs) to the Google Cloud Operations Suite.\n */\nexport class GcpOpenTelemetry implements TelemetryConfig {\n  private readonly config: GcpPluginConfig;\n  private readonly resource: Resource;\n\n  constructor(config: GcpPluginConfig) {\n    this.config = config;\n    this.resource = new Resource({ type: 'global' }).merge(\n      new GcpDetectorSync().detect()\n    );\n  }\n\n  /**\n   * Log hook for writing trace and span metadata to log messages in the format\n   * required by GCP.\n   */\n  private gcpTraceLogHook = (span: Span, record: any) => {\n    const spanContext = span.spanContext();\n    const isSampled = !!(spanContext.traceFlags & TraceFlags.SAMPLED);\n    const projectId = this.config.projectId;\n\n    record['logging.googleapis.com/trace'] ??=\n      `projects/${projectId}/traces/${spanContext.traceId}`;\n    record['logging.googleapis.com/trace_sampled'] ??= isSampled ? '1' : '0';\n    record['logging.googleapis.com/spanId'] ??= spanContext.spanId;\n  };\n\n  getConfig(): Partial<NodeSDKConfiguration> {\n    spanProcessor = new BatchSpanProcessor(this.createSpanExporter());\n    return {\n      resource: this.resource,\n      spanProcessor: spanProcessor,\n      sampler: this.config.telemetry.sampler,\n      instrumentations: this.getInstrumentations(),\n      metricReader: this.createMetricReader(),\n    };\n  }\n\n  private createSpanExporter(): SpanExporter {\n    spanExporter = new AdjustingTraceExporter(\n      this.shouldExportTraces()\n        ? new TraceExporter({\n            credentials: this.config.credentials,\n          })\n        : new InMemorySpanExporter(),\n      this.config.telemetry.exportIO,\n      this.config.projectId\n    );\n    return spanExporter;\n  }\n\n  /**\n   * Creates a {MetricReader} for pushing metrics out to GCP via OpenTelemetry.\n   */\n  private createMetricReader(): PeriodicExportingMetricReader {\n    metricExporter = this.buildMetricExporter();\n    return new PeriodicExportingMetricReader({\n      exportIntervalMillis: this.config.telemetry.metricExportIntervalMillis,\n      exportTimeoutMillis: this.config.telemetry.metricExportTimeoutMillis,\n      exporter: metricExporter,\n    });\n  }\n\n  /** Gets all open telemetry instrumentations as configured by the plugin. */\n  private getInstrumentations() {\n    if (this.config.telemetry.autoInstrumentation) {\n      return getNodeAutoInstrumentations(\n        this.config.telemetry.autoInstrumentationConfig\n      ).concat(this.getDefaultLoggingInstrumentations());\n    }\n    return this.getDefaultLoggingInstrumentations();\n  }\n\n  private shouldExportTraces(): boolean {\n    return this.config.telemetry.export && !this.config.telemetry.disableTraces;\n  }\n\n  private shouldExportMetrics(): boolean {\n    return (\n      this.config.telemetry.export && !this.config.telemetry.disableMetrics\n    );\n  }\n\n  /** Always configure the Pino and Winston instrumentations */\n  private getDefaultLoggingInstrumentations(): Instrumentation[] {\n    return [\n      new WinstonInstrumentation({ logHook: this.gcpTraceLogHook }),\n      new PinoInstrumentation({ logHook: this.gcpTraceLogHook }),\n    ];\n  }\n\n  private buildMetricExporter(): PushMetricExporter {\n    const exporter: PushMetricExporter = this.shouldExportMetrics()\n      ? new MetricExporter({\n          projectId: this.config.projectId,\n          userAgent: {\n            product: 'genkit',\n            version: GENKIT_VERSION,\n          },\n          credentials: this.config.credentials,\n        })\n      : new InMemoryMetricExporter(AggregationTemporality.DELTA);\n    exporter.selectAggregation = (instrumentType: InstrumentType) => {\n      if (instrumentType === InstrumentType.HISTOGRAM) {\n        return new ExponentialHistogramAggregation();\n      }\n      return new DefaultAggregation();\n    };\n    exporter.selectAggregationTemporality = (\n      instrumentType: InstrumentType\n    ) => {\n      return AggregationTemporality.DELTA;\n    };\n    return exporter;\n  }\n}\n\n/**\n * Adjusts spans before exporting to GCP. In particular, redacts PII\n * (input prompts and outputs), and adds a workaround attribute to\n * error spans that marks them as error in GCP.\n */\nclass AdjustingTraceExporter implements SpanExporter {\n  constructor(\n    private exporter: SpanExporter,\n    private logIO: boolean,\n    private projectId?: string\n  ) {}\n\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    this.exporter?.export(this.adjust(spans), resultCallback);\n  }\n\n  shutdown(): Promise<void> {\n    return this.exporter?.shutdown();\n  }\n\n  getExporter(): SpanExporter {\n    return this.exporter;\n  }\n\n  forceFlush(): Promise<void> {\n    if (this.exporter?.forceFlush) {\n      return this.exporter.forceFlush();\n    }\n    return Promise.resolve();\n  }\n\n  private adjust(spans: ReadableSpan[]): ReadableSpan[] {\n    const allPaths = spans\n      .filter((span) => span.attributes['genkit:path'])\n      .map(\n        (span) =>\n          ({\n            path: span.attributes['genkit:path'] as string,\n            status:\n              (span.attributes['genkit:state'] as string) === 'error'\n                ? 'failure'\n                : 'success',\n            error: extractErrorName(span.events),\n            latency: hrTimeToMilliseconds(\n              hrTimeDuration(span.startTime, span.endTime)\n            ),\n          }) as PathMetadata\n      );\n\n    const allLeafPaths = new Set<PathMetadata>(\n      allPaths.filter((leafPath) =>\n        allPaths.every(\n          (path) =>\n            path.path === leafPath.path ||\n            !path.path.startsWith(leafPath.path) ||\n            (path.path.startsWith(leafPath.path) &&\n              path.status !== leafPath.status)\n        )\n      )\n    );\n\n    return spans.map((span) => {\n      this.tickTelemetry(span, allLeafPaths);\n\n      span = this.redactPii(span);\n      span = this.markErrorSpanAsError(span);\n      span = this.normalizeLabels(span);\n      return span;\n    });\n  }\n\n  private tickTelemetry(span: ReadableSpan, paths: Set<PathMetadata>) {\n    const attributes = span.attributes;\n\n    if (!Object.keys(attributes).includes('genkit:type')) {\n      return;\n    }\n\n    const type = attributes['genkit:type'] as string;\n    const subtype = attributes['genkit:metadata:subtype'] as string;\n\n    if (type === 'flow') {\n      flowsTelemetry.tick(span, paths, this.logIO, this.projectId);\n      return;\n    }\n\n    if (type === 'action' && subtype === 'model') {\n      generateTelemetry.tick(span, paths, this.logIO, this.projectId);\n      return;\n    }\n\n    if (type === 'action' || type == 'flowStep') {\n      actionTelemetry.tick(span, paths, this.logIO, this.projectId);\n    }\n  }\n\n  private redactPii(span: ReadableSpan): ReadableSpan {\n    const hasInput = 'genkit:input' in span.attributes;\n    const hasOutput = 'genkit:output' in span.attributes;\n\n    return !hasInput && !hasOutput\n      ? span\n      : {\n          ...span,\n          spanContext: span.spanContext,\n          attributes: {\n            ...span.attributes,\n            'genkit:input': '<redacted>',\n            'genkit:output': '<redacted>',\n          },\n        };\n  }\n\n  // This is a workaround for GCP Trace to mark a span with a red\n  // exclamation mark indicating that it is an error.\n  private markErrorSpanAsError(span: ReadableSpan): ReadableSpan {\n    return span.status.code !== SpanStatusCode.ERROR\n      ? span\n      : {\n          ...span,\n          spanContext: span.spanContext,\n          attributes: {\n            ...span.attributes,\n            '/http/status_code': '599',\n          },\n        };\n  }\n\n  // This is a workaround for GCP Trace to mark a span with a red\n  // exclamation mark indicating that it is an error.\n  private normalizeLabels(span: ReadableSpan): ReadableSpan {\n    const normalized = {} as Record<string, any>;\n    for (const [key, value] of Object.entries(span.attributes)) {\n      normalized[key.replace(/\\:/g, '/')] = value;\n    }\n    return {\n      ...span,\n      spanContext: span.spanContext,\n      attributes: normalized,\n    };\n  }\n}\n\nexport function __getMetricExporterForTesting(): InMemoryMetricExporter {\n  return metricExporter as InMemoryMetricExporter;\n}\n\nexport function __getSpanExporterForTesting(): InMemorySpanExporter {\n  return spanExporter.getExporter() as InMemorySpanExporter;\n}\n\nexport function __forceFlushSpansForTesting() {\n  spanProcessor.forceFlush();\n}\n"],"mappings":"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","names":["import_core"]}