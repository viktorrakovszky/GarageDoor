{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { genkitPlugin, Plugin } from '@genkit-ai/core';\nimport { credentialsFromEnvironment } from './auth.js';\nimport { GcpLogger } from './gcpLogger.js';\nimport { GcpOpenTelemetry } from './gcpOpenTelemetry.js';\nimport { TelemetryConfigs } from './telemetry/defaults.js';\nimport { GcpPluginConfig, GcpPluginOptions } from './types.js';\n\n/**\n * Provides a plugin for using Genkit with GCP.\n */\nexport const googleCloud: Plugin<[GcpPluginOptions] | []> = genkitPlugin(\n  'googleCloud',\n  async (options?: GcpPluginOptions) => build(options)\n);\n\n/**\n * Configures and builds the plugin.\n * Not normally needed, but exposed for use by the firebase plugin.\n */\nexport async function build(options?: GcpPluginOptions) {\n  const pluginConfig = await configureGcpPlugin(options);\n  return {\n    telemetry: {\n      instrumentation: {\n        id: 'googleCloud',\n        value: new GcpOpenTelemetry(pluginConfig),\n      },\n      logger: {\n        id: 'googleCloud',\n        value: new GcpLogger(pluginConfig),\n      },\n    },\n  };\n}\n\n/**\n * Create a configuration object for the plugin.\n * Not normally needed, but exposed for use by the firebase plugin.\n */\nexport async function configureGcpPlugin(\n  options?: GcpPluginOptions\n): Promise<GcpPluginConfig> {\n  const envOptions = await credentialsFromEnvironment();\n  return {\n    projectId: options?.projectId || envOptions.projectId,\n    credentials: options?.credentials || envOptions.credentials,\n    telemetry: TelemetryConfigs.defaults(options?.telemetryConfig),\n  };\n}\n\nexport default googleCloud;\nexport * from './gcpLogger.js';\nexport * from './gcpOpenTelemetry.js';\nexport { GcpPluginOptions, GcpTelemetryConfigOptions } from './types.js';\n"],"mappings":";;;AAgBA,SAAS,oBAA4B;AACrC,SAAS,kCAAkC;AAC3C,SAAS,iBAAiB;AAC1B,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AAM1B,MAAM,cAA+C;AAAA,EAC1D;AAAA,EACA,CAAO,YAA4B;AAAG,iBAAM,OAAO;AAAA;AACrD;AAMA,SAAsB,MAAM,SAA4B;AAAA;AACtD,UAAM,eAAe,MAAM,mBAAmB,OAAO;AACrD,WAAO;AAAA,MACL,WAAW;AAAA,QACT,iBAAiB;AAAA,UACf,IAAI;AAAA,UACJ,OAAO,IAAI,iBAAiB,YAAY;AAAA,QAC1C;AAAA,QACA,QAAQ;AAAA,UACN,IAAI;AAAA,UACJ,OAAO,IAAI,UAAU,YAAY;AAAA,QACnC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAMA,SAAsB,mBACpB,SAC0B;AAAA;AAC1B,UAAM,aAAa,MAAM,2BAA2B;AACpD,WAAO;AAAA,MACL,YAAW,mCAAS,cAAa,WAAW;AAAA,MAC5C,cAAa,mCAAS,gBAAe,WAAW;AAAA,MAChD,WAAW,iBAAiB,SAAS,mCAAS,eAAe;AAAA,IAC/D;AAAA,EACF;AAAA;AAEA,IAAO,cAAQ;AACf,cAAc;AACd,cAAc;AACd,SAAS,oBAAAA,mBAAkB,iCAAiC;","names":["GcpPluginOptions"]}