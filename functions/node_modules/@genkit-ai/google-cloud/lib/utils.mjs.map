{"version":3,"sources":["../src/utils.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TraceFlags } from '@opentelemetry/api';\nimport { ReadableSpan, TimedEvent } from '@opentelemetry/sdk-trace-base';\n\nexport function extractOuterFlowNameFromPath(path: string) {\n  if (!path || path === '<unknown>') {\n    return '<unknown>';\n  }\n\n  const flowName = path.match('/{([^,}]+),t:flow}+');\n  return flowName ? flowName[1] : '<unknown>';\n}\n\nexport function extractErrorName(events: TimedEvent[]): string | undefined {\n  return events\n    .filter((event) => event.name === 'exception')\n    .map((event) => {\n      const attributes = event.attributes;\n      return attributes\n        ? (attributes['exception.type'] as string)\n        : '<unknown>';\n    })\n    .at(0);\n}\n\nexport function extractErrorMessage(events: TimedEvent[]): string | undefined {\n  return events\n    .filter((event) => event.name === 'exception')\n    .map((event) => {\n      const attributes = event.attributes;\n      return attributes\n        ? (attributes['exception.message'] as string)\n        : '<unknown>';\n    })\n    .at(0);\n}\n\nexport function extractErrorStack(events: TimedEvent[]): string | undefined {\n  return events\n    .filter((event) => event.name === 'exception')\n    .map((event) => {\n      const attributes = event.attributes;\n      return attributes\n        ? (attributes['exception.stacktrace'] as string)\n        : '<unknown>';\n    })\n    .at(0);\n}\n\nexport function createCommonLogAttributes(\n  span: ReadableSpan,\n  projectId?: string\n) {\n  const spanContext = span.spanContext();\n  const isSampled = !!(spanContext.traceFlags & TraceFlags.SAMPLED);\n  return {\n    'logging.googleapis.com/spanId': spanContext.spanId,\n    'logging.googleapis.com/trace': `projects/${projectId}/traces/${spanContext.traceId}`,\n    'logging.googleapis.com/trace_sampled': isSampled ? '1' : '0',\n  };\n}\n"],"mappings":";AAgBA,SAAS,kBAAkB;AAGpB,SAAS,6BAA6B,MAAc;AACzD,MAAI,CAAC,QAAQ,SAAS,aAAa;AACjC,WAAO;AAAA,EACT;AAEA,QAAM,WAAW,KAAK,MAAM,qBAAqB;AACjD,SAAO,WAAW,SAAS,CAAC,IAAI;AAClC;AAEO,SAAS,iBAAiB,QAA0C;AACzE,SAAO,OACJ,OAAO,CAAC,UAAU,MAAM,SAAS,WAAW,EAC5C,IAAI,CAAC,UAAU;AACd,UAAM,aAAa,MAAM;AACzB,WAAO,aACF,WAAW,gBAAgB,IAC5B;AAAA,EACN,CAAC,EACA,GAAG,CAAC;AACT;AAEO,SAAS,oBAAoB,QAA0C;AAC5E,SAAO,OACJ,OAAO,CAAC,UAAU,MAAM,SAAS,WAAW,EAC5C,IAAI,CAAC,UAAU;AACd,UAAM,aAAa,MAAM;AACzB,WAAO,aACF,WAAW,mBAAmB,IAC/B;AAAA,EACN,CAAC,EACA,GAAG,CAAC;AACT;AAEO,SAAS,kBAAkB,QAA0C;AAC1E,SAAO,OACJ,OAAO,CAAC,UAAU,MAAM,SAAS,WAAW,EAC5C,IAAI,CAAC,UAAU;AACd,UAAM,aAAa,MAAM;AACzB,WAAO,aACF,WAAW,sBAAsB,IAClC;AAAA,EACN,CAAC,EACA,GAAG,CAAC;AACT;AAEO,SAAS,0BACd,MACA,WACA;AACA,QAAM,cAAc,KAAK,YAAY;AACrC,QAAM,YAAY,CAAC,EAAE,YAAY,aAAa,WAAW;AACzD,SAAO;AAAA,IACL,iCAAiC,YAAY;AAAA,IAC7C,gCAAgC,YAAY,SAAS,WAAW,YAAY,OAAO;AAAA,IACnF,wCAAwC,YAAY,MAAM;AAAA,EAC5D;AACF;","names":[]}