{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { genkitPlugin, isDevEnv, Plugin } from '@genkit-ai/core';\nimport { logger } from '@genkit-ai/core/logging';\nimport { FirestoreStateStore } from '@genkit-ai/flow';\nimport {\n  configureGcpPlugin,\n  GcpLogger,\n  GcpOpenTelemetry,\n  GcpTelemetryConfigOptions,\n} from '@genkit-ai/google-cloud';\nimport { JWTInput } from 'google-auth-library';\nimport { GcpPluginConfig } from '../../google-cloud/lib/types.js';\nimport { FirestoreTraceStore } from './firestoreTraceStore.js';\nexport { defineFirestoreRetriever } from './firestoreRetriever.js';\n\nexport interface FirestorePluginParams {\n  projectId?: string;\n  credentials?: JWTInput;\n  flowStateStore?: {\n    collection?: string;\n    databaseId?: string;\n  };\n  traceStore?: {\n    collection?: string;\n    databaseId?: string;\n  };\n  telemetryConfig?: GcpTelemetryConfigOptions;\n}\n\nexport const firebase: Plugin<[FirestorePluginParams] | []> = genkitPlugin(\n  'firebase',\n  async (params?: FirestorePluginParams) => {\n    const gcpConfig: GcpPluginConfig = await configureGcpPlugin(params);\n\n    if (isDevEnv() && !gcpConfig.projectId) {\n      // Helpful warning, since Cloud SDKs probably will not work\n      logger.warn(\n        'WARNING: unable to determine Firebase Project ID. Run \"gcloud auth application-default login --project MY_PROJECT_ID\"'\n      );\n    }\n\n    const flowStateStoreOptions = {\n      projectId: gcpConfig.projectId,\n      credentials: gcpConfig.credentials,\n      ...params?.flowStateStore,\n    };\n    const traceStoreOptions = {\n      projectId: gcpConfig.projectId,\n      credentials: gcpConfig.credentials,\n      ...params?.traceStore,\n    };\n\n    return {\n      flowStateStore: {\n        id: 'firestore',\n        value: new FirestoreStateStore(flowStateStoreOptions),\n      },\n      traceStore: {\n        id: 'firestore',\n        value: new FirestoreTraceStore(traceStoreOptions),\n      },\n      telemetry: {\n        instrumentation: {\n          id: 'firebase',\n          value: new GcpOpenTelemetry(gcpConfig),\n        },\n        logger: {\n          id: 'firebase',\n          value: new GcpLogger(gcpConfig),\n        },\n      },\n    };\n  }\n);\n"],"mappings":";;;;AAgBA,SAAS,cAAc,gBAAwB;AAC/C,SAAS,cAAc;AACvB,SAAS,2BAA2B;AACpC;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OAEK;AAGP,SAAS,2BAA2B;AACpC,SAAS,gCAAgC;AAgBlC,MAAM,WAAiD;AAAA,EAC5D;AAAA,EACA,CAAO,WAAmC;AACxC,UAAM,YAA6B,MAAM,mBAAmB,MAAM;AAElE,QAAI,SAAS,KAAK,CAAC,UAAU,WAAW;AAEtC,aAAO;AAAA,QACL;AAAA,MACF;AAAA,IACF;AAEA,UAAM,wBAAwB;AAAA,MAC5B,WAAW,UAAU;AAAA,MACrB,aAAa,UAAU;AAAA,OACpB,iCAAQ;AAEb,UAAM,oBAAoB;AAAA,MACxB,WAAW,UAAU;AAAA,MACrB,aAAa,UAAU;AAAA,OACpB,iCAAQ;AAGb,WAAO;AAAA,MACL,gBAAgB;AAAA,QACd,IAAI;AAAA,QACJ,OAAO,IAAI,oBAAoB,qBAAqB;AAAA,MACtD;AAAA,MACA,YAAY;AAAA,QACV,IAAI;AAAA,QACJ,OAAO,IAAI,oBAAoB,iBAAiB;AAAA,MAClD;AAAA,MACA,WAAW;AAAA,QACT,iBAAiB;AAAA,UACf,IAAI;AAAA,UACJ,OAAO,IAAI,iBAAiB,SAAS;AAAA,QACvC;AAAA,QACA,QAAQ;AAAA,UACN,IAAI;AAAA,UACJ,OAAO,IAAI,UAAU,SAAS;AAAA,QAChC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;","names":[]}